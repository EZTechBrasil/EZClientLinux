
/*****************************************************************
 *
 * Copyright (C) 2009-2012 EZTech Tecnologia e Automa��o Ltda.
 * All rights reserved.
 *
 * Created 01/06/2010
 *
 * File: Definitions.h
 * Desc: Public definitions header file
 *
 * Visual SourceSafe details
 * =========================
 *
 * $Header: /EZController.root/EZController/COMMON/Definitions.h 1     17/04/07 13:55 Kelvin Ussher $
 * $History: Definitions.h $
 *
 * *****************  Version 1  *****************
 * User: Kelvin Ussher Date: 17/04/11   Time: 13:55
 * Created in $/EZController.root/EZController/COMMON
 *
 *
 ******************************************************************/

#define NULL_ID -1


enum EClients
{
	SERVER_CLIENT = 0 ,
	POS_CLIENT = 1 ,
	DB_CLIENT = 100 ,
	DRIVER_CLIENT = 200
} ;

typedef enum TClientType
{
	SIMPLE_CLIENT_TYPE = 0x00 ,
	CALLS_CLIENT_TYPE = 0x01 ,
	EVENTS_CLIENT_TYPE = 0x02 ,
	DB_CLIENT_TYPE = 0x04
} TClientType ;

typedef enum TObjectType
{
	UNKNOWN_OBJECT ,
	DB_OBJECT ,
	EVENTS_OBJECT ,
	CLIENT_OBJECT ,
	PUMP_OBJECT ,
	HOSE_OBJECT ,
	GRADE_OBJECT ,
	TANK_OBJECT ,
	PORT_OBJECT ,
	DELIVERY_OBJECT ,
	ATTENDANT_OBJECT ,
	PUMP_DRV_OBJECT ,
	HOSE_DRV_OBJECT ,
	GRADE_DRV_OBJECT ,
	TANK_DRV_OBJECT ,
	PORT_DRV_OBJECT ,
	ZIGBEE_OBJECT ,
	EZMOD_OBJECT ,
	RESERVED_OBJECT ,
	CARD_CLIENT_OBJECT ,
	CARD_READ_OBJECT ,
	DELIVERY_EX_OBJECT ,
	LOG_EVENT_OBJECT ,
	SENSOR_OBJECT ,
	SENSOR_DRV_OBJECT ,
	PRODUCT_OBJECT ,
	SALE_ITEM_OBJECT ,
	LAST_OBJECT // must be last
} TObjectType ;

typedef enum TLicenseType
{
	EZSERVER_LICENSE_MASK = 0x01 ,
	EZHO_LICENSE_MASK = 0x02 ,
	ZIGBEE_LICENSE_MASK = 0x04 ,
	EZMONITOR_LICENSE_MASK = 0x08 ,
	TANK_MANAGEMENT_LICENSE_MASK = 0x10 ,
	DEVELOPMENT_LICENSE_MASK = 0x20 ,
	XPERT_LICENSE_MASK = 0x40
} TLicenseType ;


typedef enum TZigBeeDevice
{
	UNKNOWN_ZBDEVICE ,
	UNUSED1_ZBDEVICE ,
	UNUSED2_ZBDEVICE ,
	UNUSED3_ZBDEVICE ,
	UNUSED4_ZBDEVICE ,
	EZREMOTE_WIRELESS_ZBDEVICE ,
	EZREMOTE_SLOT1_ZBDEVICE ,
	EZREMOTE_SLOT2_ZBDEVICE ,
	EZREMOTE_SLOT3_ZBDEVICE ,
	EZREMOTE_SLOT4_ZBDEVICE ,
	EZPS_WIRELESS_ZBDEVICE , 
	EZPS_SLOT1_ZBDEVICE , 
	EZPS_SLOT2_ZBDEVICE , 
	EZPS_SLOT3_ZBDEVICE , 
	EZPS_SLOT4_ZBDEVICE , 
	INVALID_ZBDEVICE ,
} TZigBeeDevice ;

typedef enum TPriceControl
{
	UNKNOWN_PRICE_CONTROL ,
	REMOTE_PRICE_CONTROL ,
	LOCAL_PRICE_CONTROL ,
} TPriceControl ;

typedef enum TPriceType
{
	UNKNOWN_PRICE_TYPE ,
	FIXED_PRICE_TYPE ,
	DISCOUNT_PRICE_TYPE ,
	SURCHARGE_PRICE_TYPE ,
} TPriceType ;

typedef enum TDurationType
{
	UNKNOWN_DURATION_TYPE ,
	SINGLE_DURATION_TYPE ,
	MULTIPLE_DURATION_TYPE ,
} TDurationType ;

typedef enum TPumpReserve
{
	UNKNOWN_RESERVE ,
	NOT_RESERVED  ,
	RESERVED_FOR_PREPAY ,
	AUTHED_FOR_PREPAY ,
	RESERVED_FOR_PREAUTH ,
	AUTHED_FOR_PREAUTH ,
	RESERVED_UNUSED1 ,
	RESERVED_UNUSED2 ,
	RESERVED_FOR_PAYMENT ,
	AUTHED_FOR_PAYMENT ,
} TPumpReserve ;

typedef enum TDisplayFormat
{
	UNKNOWN_DISPLAY_FORMAT ,
	PUMP_DISPLAY_4_3 ,		// 9.999
	PUMP_DISPLAY_4_2 ,		// 99.99
	PUMP_DISPLAY_4_1 ,		// 999.9
	PUMP_DISPLAY_4_0 ,		// 9999
	PUMP_DISPLAY_5_3 ,		// 99.999
	PUMP_DISPLAY_5_2 ,		// 999.99
	PUMP_DISPLAY_5_1 ,		// 9999.9
	PUMP_DISPLAY_5_0 ,		// 99999
	PUMP_DISPLAY_6_3 ,		// 999.999
	PUMP_DISPLAY_6_2 ,		// 9999.99
	PUMP_DISPLAY_6_1 ,		// 99999.9
	PUMP_DISPLAY_6_0 ,		// 999999
	PUMP_DISPLAY_4_N1 ,		// 99990
	PUMP_DISPLAY_4_N2 ,		// 999900
	PUMP_DISPLAY_4_N3 ,		// 9999000
	PUMP_DISPLAY_5_N1 ,		// 999990
	PUMP_DISPLAY_5_N2 ,		// 9999900
	PUMP_DISPLAY_5_N3 ,		// 99999000
	PUMP_DISPLAY_6_N1 ,		// 9999990
	PUMP_DISPLAY_6_N2 ,		// 99999900
	PUMP_DISPLAY_6_N3 		// 999999000
} TDisplayFormat ;

typedef enum TAuthMode
{
	INVALID_AUTH_MODE ,
	NOT_AUTHABLE ,
	COMP_AUTH ,
	AUTO_AUTH ,
	MONITOR_AUTH ,
	ATTENDANT_AUTH ,
	ATTENDANT_MONITOR_AUTH ,
	CTF_AUTH ,
	TAG_AUTH ,
	OFFLINE_AUTH ,
	ATTENDANT_TAG_AUTH ,
	CLIENT_TAG_AUTH ,
	ATTENDANT_AND_CLIENT_TAG_AUTH,
	ATTENDANT_OR_CLIENT_TAG_AUTH,
	EXT_AUTH ,
	PRICE_TAG_AUTH ,						// new 
	ATTENDANT_PRICE_TAG_AUTH ,				// new 
	CLIENT_PRICE_TAG_AUTH ,					// new 
	ATTENDANT_AND_CLIENT_PRICE_TAG_AUTH,	// new 
	ATTENDANT_OR_CLIENT_PRICE_TAG_AUTH,		// new 
	LAST_AUTH_MODE
} TAuthMode ;

typedef enum TStackMode
{
	INVALID_STACK_MODE ,
	STACK_DISABLED ,
    STACK_MANUAL ,
	STACK_AUTO
} TStackMode ;

typedef enum TDeliveryState
{
	UNKNOWN_DEL_STATE ,
	CURRENT ,
	STACKED ,
	CLEARED
} TDeliveryState ;

typedef enum TDeliveryType
{
	UNKNOWN_DEL_TYPE ,
	POSTPAY ,
	PREPAY ,
	PREPAY_REFUND ,
	PREAUTH ,
	MONITOR ,
	TEST ,
	DRIVEOFF ,
	OFFLINE ,
	CTF ,
	CARD_CLIENT ,
	PAYMENT , 
	INVALID_DEL_TYPE
} TDeliveryType ;

typedef enum TDeliveryLogState
{
	INVALID_LSTATE ,
	NOT_LOGGED_LSTATE ,
	LOGGED_LSTATE ,
	CLEARED_LSTATE
} TDeliveryLogState ;

typedef enum TDeviceType
{
	SERVER_DEVICE = 1 ,
	DISPENSER_DEVICE ,
	DISPENSER_DRIVER_DEVICE ,
	TANK_GAUGE_DEVICE ,
	TANK_GAUGE_DRIVER_DEVICE ,
	PRICE_SIGN_DEVICE ,
	PRICE_SIGN_DRIVER_DEVICE
} TDeviceType ;

typedef enum TEventType
{
	INVALID_EVENT = 0 ,

	SERVER_INFO_EVENT = 100 ,
	SERVER_STARTED_EVENT  ,
	SERVER_STOPPED_EVENT ,

	DISPENSER_INFO_EVENT = 200 ,
	DISPENSER_INSTALLED_EVENT ,
	DISPENSER_STARTED_EVENT ,
	DISPENSER_STOPPED_EVENT ,
	DISPENSER_E_TOTALS_ERROR_EVENT ,
	DISPENSER_OFFLINE_DELIVERIES_EVENT ,
	DISPENSER_REMOTE_PRICE_CHANGE_EVENT ,
	DISPENSER_LOST_DELIVERY_EVENT ,
	DISPENSER_TAG_READ_EVENT ,
	DISPENSER_ATTENDANT_TAG_READ_EVENT ,

	DISPENSER_DRIVER_INFO_EVENT = 300 ,
	DISPENSER_DRIVER_STARTED_EVENT ,
	DISPENSER_DRIVER_STOPPED_EVENT ,

	TANK_INFO_EVENT = 400 ,
	TANK_SETUP_DATA_WARNING_EVENT ,
	TANK_LEAK_ALARM_EVENT ,
	TANK_HIGH_WATER_ALARM_EVENT ,
	TANK_OVERFILL_ALARM_EVENT ,
	TANK_LOW_PRODUCT_ALARM_EVENT ,
	TANK_SUDDEN_LOSS_ALARM_EVENT ,
	TANK_HIGH_PRODUCT_ALARM_EVENT ,
	TANK_INVALID_FUEL_LEVEL_ALARM_EVENT ,
	TANK_PROBE_OUT_ALARM_EVENT ,
	TANK_HIGH_WATER_WARNING_EVENT ,
	TANK_DELIVERY_NEEDED_WARNING_EVENT ,
	TANK_MAXIMUM_PRODUCT_ALARM_EVENT ,
	TANK_GROSS_LEAK_TEST_FAILED_ALARM_EVENT ,
	TANK_PERIODIC_LEAK_TEST_FAILED_ALARM_EVENT ,
	TANK_ANNUAL_LEAK_TEST_FAILED_ALARM_EVENT ,
	TANK_PERIODIC_TEST_NEEDED_WARNING_EVENT ,
	TANK_ANNUAL_TEST_NEEDED_WARNING_EVENT ,
	TANK_PERIODIC_TEST_NEEDED_ALARM_EVENT ,
	TANK_ANNUAL_TEST_NEEDED_ALARM_EVENT ,
	TANK_LEAK_TEST_ACTIVE_INFO_EVENT ,
	TANK_NO_CSLD_IDLE_TIME_WARNING_EVENT ,
	TANK_SIPHON_BREAK_ACTIVE_WARNING_EVENT ,
	TANK_CSLD_RATE_INCREASE_WARNING_EVENT ,
	TANK_ACCUCHART_CALIBARTION_WARNING_EVENT ,
	TANK_HRM_RECONCILATION_WARNING_EVENT ,
	TANK_HRM_RECONCILATION_ALARM_EVENT ,
	TANK_COLD_TEMPERATURE_WARNING_EVENT ,
	TANK_MISSING_DELIVERY_TICKET_WARNING_EVENT ,
	TANK_LINE_GROSS_LEAK_ALARM_EVENT ,
	TANK_SENSOR_STATE_ALARM_EVENT ,

	TANK_GAUGE_INFO_EVENT = 500 ,
	TANK_GAUGE_INSTALLED_EVENT ,
	TANK_GAUGE_STARTED_EVENT ,
	TANK_GAUGE_STOPPED_EVENT ,

	TANK_GAUGE_DRIVER_INFO_EVENT = 600 ,
	TANK_GAUGE_DRIVER_STARTED_EVENT ,
	TANK_GAUGE_DRIVER_STOPPED_EVENT ,

	PRICE_SIGN_INFO_EVENT = 700 ,
	PRICE_SIGN_INSTALLED_EVENT ,
	PRICE_SIGN_STARTED_EVENT ,
	PRICE_SIGN_STOPPED_EVENT ,

	PRICE_SIGN_DRIVER_INFO_EVENT = 800 ,
	PRICE_SIGN_DRIVER_STARTED_EVENT ,
	PRICE_SIGN_DRIVER_STOPPED_EVENT ,
} TEventType ;


typedef enum TResult
{
	INVALID_HEADER_VERSION			= -1,
	INVALID_INTERFACE_VERSION		= -2,
	INVLAID_INTERFACE_ID			= -3,
	INVALID_FUNCTION_ID				= -4,
	INVALID_SOURCE_ID				= -5,
	INVALID_DESTINATION_ID			= -6,
	INVALID_OBJECT_ID				= -7,
	INVALID_SEQUENCE_NO				= -8,
	MSG_IN_BUFFER_OVERFLOW 			= -9,
	MSG_OUT_BUFFER_OVERFLOW 		= -10,
	PARAMETER_TYPE_MISMATCH 		= -11,
	PARAMETER_COUNT_MISMATCH 		= -12,
	SERVER_TIMEOUT 					= -13,
	CONNECTION_BROKEN 				= -14,
	SOCKET_READ_ERROR 				= -15,
	NO_MSG_ERROR					= -16,
	SOCKET_WRITE_ERROR 				= -17,
	SERVER_NONASYNC_CALL			= -18,
	SOCKET_NOT_CONNECTED			= -19,
	CLIENT_NOT_CONNECTED			= -20,
	OCX_NOT_CONNECTED				= -21,
	INVALID_CLIENT_TYPE				= -22,
	INTERNAL_SERVER_ERROR			= -23,
	CALL_SOCKET_CLOSED_RESULT		= -24,
	OK_RESULT						= 0,
	OBJECT_EXISTS_RESULT, 
	OBJECT_DOES_NOT_EXIST_RESULT,
	OBJECT_HAS_DEPENDANCIES_RESULT,
	INVALID_INTERFACE_RESULT,
	INVALID_EVENTS_SOCKET_RESULT,
	INVALID_OBJECT_LINK_RESULT , 
	INVALID_OBJECT_PARAMETER_RESULT ,	// new 
	NOT_LOGGED_ON_RESULT , 
	ALREADY_LOGGED_ON_RESULT ,
	INVALID_LOGON_RESULT ,
	INVALID_CLIENT_TYPE_RESULT ,
	PUMP_NOT_RESPONDING_RESULT,
	PUMP_IN_USE_RESULT ,
	PUMP_ALREADY_RESERVED_RESULT ,
	PUMP_NOT_AVAILABLE_RESULT ,
	PUMP_NOT_RESERVED_RESULT ,
	PUMP_NOT_RESERVED_FOR_PREPAY_RESULT ,
	PUMP_NOT_RESERVED_BY_YOU_RESULT ,
	INVALID_PRESET_TYPE_RESULT ,
	INVALID_HOSE_MASK_RESULT ,
	PUMP_NOT_RESERVED_FOR_PREAUTH_RESULT ,
	PREPAYS_NOT_PREMITTED_RESULT ,
	PREAUTHS_NOT_PREMITTED_RESULT ,		// new 
	PUMP_CANNOT_BE_AUTHED_RESULT ,
	PUMP_NOT_AUTHED_RESULT ,
	NO_DELIVERY_AVAILABLE_RESULT ,
	STACK_IS_DISABLED_RESULT ,
	NO_CURRENT_DELIVERY_RESULT ,
	STACK_FULL_RESULT ,
	PUMP_NOT_STOPPED_RESULT ,
	PUMP_NOT_DELIVERING_RESULT ,
	INVALID_PRESET_AMOUNT_RESULT ,
	PUMP_IS_STOPPED_RESULT ,
	DELIVERY_ALREADY_LOCKED_RESULT ,
	DELIVERY_IS_RESERVED_RESULT ,
	DELIVERY_NOT_LOCKED_RESULT ,
	DELIVERY_NOT_LOCKED_BY_YOU_RESULT ,
	DELIVERY_TYPE_CANNOT_BE_STACKED_RESULT ,
	DELIVERY_CANNOT_BE_CLEARED_AS_THIS_TYPE_RESULT ,
	DELIVERY_NOT_CURRENT_RESULT ,
	INVALID_CLIENT_ID_RESULT ,
	DELIVERY_TERMINATED_RESULT ,
	HAS_CURRENT_DELIVERY_RESULT ,
	ATTENDANT_NOT_LOGGED_ON_RESULT , 
	ATTENDANT_ALREADY_LOGGED_ON_RESULT ,
	PUMP_IN_WRONG_AUTH_MODE_RESULT ,
	PUMP_HAS_DELIVERIES_RESULT ,
	SERVER_NOT_LICENSED_RESULT ,
	NO_EZMOD_RESULT ,
	LICENSE_EXPIRED_RESULT ,
	CTF_NOT_PREMITTED_RESULT ,
	PUMP_NOT_RESERVED_FOR_CTF_RESULT ,
	ZIGBEE_MODULE_TYPE_ERROR_RESULT ,
	DELAY_LOGON_RESULT ,
	STANDALONE_AUTHMODE_ERROR_RESULT ,
	SERVER_CLIENT_INCOMPATIBLE_ERROR_RESULT ,
	TAG_ALREADY_IN_USE_ERROR_RESULT ,
	LOG_EVENT_ALREADY_ACKED_RESULT ,
	BAD_SESSION_ID_RESULT ,
	SOCKETS_INUSE_RESULT ,
	SOCKET_UNCHANGED_RESULT ,
	INVALID_SOCKET_RESULT ,
	LAST_RESULT // must be last
} TResult ;

typedef enum TPresetType
{
	INVALID_PRESET_TYPE = 0 ,
	NO_PRESET_TYPE ,
	DOLLAR_PRESET_TYPE ,
	VOLUME_PRESET_TYPE ,
	DOLLAR_PREPAY_TYPE ,
	VOLUME_PREPAY_TYPE ,
	DOLLAR_PREAUTH_TYPE ,
	VOLUME_PREAUTH_TYPE ,
	DELETE_TAG_TYPE 
} TPresetType ;

typedef enum TPumpState
{
	INVALID_PUMP_STATE = 0 ,			// 00
	NOT_INSTALLED_PUMP_STATE ,			// 01
	NOT_RESPONDING_1_PUMP_STATE ,		// 02
	IDLE_PUMP_STATE ,					// 03
	PRICE_CHANGE_STATE ,				// 04
	AUTHED_PUMP_STATE ,					// 05
	CALLING_PUMP_STATE ,				// 06
	DELIVERY_STARTING_PUMP_STATE ,		// 07
	DELIVERING_PUMP_STATE ,				// 08
	TEMP_STOPPED_PUMP_STATE ,			// 09
	DELIVERY_FINISHING_PUMP_STATE ,		// 10
	DELIVERY_FINISHED_PUMP_STATE ,		// 11
	DELIVERY_TIMEOUT_PUMP_STATE ,		// 12
	HOSE_OUT_PUMP_STATE ,				// 13
	PREPAY_REFUND_TIMEOUT_STATE ,		// 14
	DELIVERY_TERMINATED_STATE ,			// 15
	ERROR_PUMP_STATE ,					// 16
	NOT_RESPONDING_2_PUMP_STATE ,		// 17
	LAST_PUMP_STATE ,					// 18
} TPumpState ;

typedef enum
{
	INVALID_PORT_STATUS = 0 ,
	CLOSED_PORT_STATUS ,
	OPEN_PORT_STATUS
} TPortStatus ;

typedef enum
{
	INVALID_TAG_TYPE ,
	ATTENDANT_TAG_TYPE ,
	BLOCKED_ATTENDANT_TAG_TYPE ,
	WRONG_SHIFT_ATTENDANT_TAG_TYPE ,
	CLIENT_TAG_TYPE ,
	BLOCKED_CLIENT_TAG_TYPE ,
	UNKNOWN_TAG_TYPE , 
	EXPIRED_CLIENT_TAG_TYPE , 
	SITE_USER_TAG_TYPE ,
	SITE_MANAGER_TAG_TYPE,
	SITE_ADMIN_TAG_TYPE,
	TEST_DELIVERY_TAG_TYPE ,
	PRICE_LEVEL_1_TAG_TYPE , // new 
	PRICE_LEVEL_2_TAG_TYPE , // new 
	PRODUCT_TAG_TYPE , 
	EXPIRED_ATT_TAG_TYPE,
	LAST_TAG_TYPE
} TTagType ;	 

typedef enum
{
	INVALID_CARD_TYPE ,
	VEHICLE_CARD_TYPE ,
	ATTENDANT_CARD_TYPE , 
	DRIVER_CARD_TYPE ,
	SECONDARY_VEHICLE_CARD_TYPE , 
	SECONDARY_ATTENDANT_CARD_TYPE,
	SECONDARY_DRIVER_CARD_TYPE ,  
} TCardType ;

typedef enum
{
	INVALID_ENTRY_TYPE,
	NO_ENTRY_TYPE,
	ODO_ENTRY_TYPE,
	DRIVER_ENTRY_TYPE,
	ODO_DRIVER_ENTRY_TYPE,
	OTHER_ENTRY_TYPE,
	OTHER_ODO_ENTRY_TYPE,
	OTHER_DRIVER_ENTRY_TYPE,
	OTHER_ODO_DRIVER_ENTRY_TYPE,
	LIMIT_ENTRY_TYPE,
	LIMIT_ODO_ENTRY_TYPE,
	LIMIT_DRIVER_ENTRY_TYPE,
	LIMIT_ODO_DRIVER_ENTRY_TYPE,
	LIMIT_OTHER_ENTRY_TYPE,
	LIMIT_OTHER_ODO_ENTRY_TYPE,
	LIMIT_OTHER_DRIVER_ENTRY_TYPE,
	LIMIT_OTHER_ODO_DRIVER_ENTRY_TYPE
} TEntryType ;

//#if !defined(_LINUX_)
#if defined(_WIN32)

typedef LONG (__cdecl *TDriverEntry) (void* );

typedef struct TDriverArgs
{
	unsigned short _size ;
	unsigned short _version ;
	short _driverID ;
	short _driverNo ;
	wchar_t _protocolINIKey[ 21 ] ;
	LONG _protocolID ;
	LONG _deviceType ;
	bool _standalone ;
	wchar_t _serialNo[ 11 ];
	wchar_t _portName[ 21 ];
	LONG _runningTotalRate ;
	TDriverEntry _driverEntry ;
} TDriverArgs ;

#endif

typedef enum THose
{
	NO_HOSES	= 0x00 ,
	HOSE_1		= 0x01 ,
	HOSE_2		= 0x02 ,
	HOSE_3		= 0x04 ,
	HOSE_4		= 0x08 ,
	HOSE_5		= 0x10 ,
	HOSE_6		= 0x20 ,
	HOSE_7		= 0x40 ,
	HOSE_8		= 0x80 ,
	ALL_HOSES	= 0xFF
} THose ;

typedef enum TAllocLimitType
{
	INVALID_LIMIT_TYPE = 0 ,
	NO_LIMIT_TYPE ,
	DOLLAR_LIMIT_TYPE ,
	VOLUME_LIMIT_TYPE
} TAllocLimitType  ;

typedef enum TClientEvent
{
	NO_CLIENT_EVENT ,
	PUMP_EVENT ,
	DELIVERY_EVENT ,
	SERVER_EVENT ,
	CLIENT_EVENT ,
	DB_LOG_EVENT ,
	DB_LOG_DELIVERY ,
	DB_CLEAR_DELIVERY ,
	DB_STACK_DELIVERY ,
	DB_LOG_ETOTALS ,
	DB_TRIGGER ,
	DB_ATTENDANT_LOGON_EVENT ,
	DB_ATTENDANT_LOGOFF_EVENT ,
	DB_TANK_STATUS ,
	UNUSED1_EVENT ,
	UNUSED2_EVENT ,
	UNUSED3_EVENT , 
    ZERO_DELIVERY_EVENT ,
	UNUSED4_EVENT ,
	ZB_PAN_EVENT ,
	UNUSED5_EVENT ,
	UNUSED6_EVENT ,
	CARD_READ_EVENT ,
	ZB2G_STATUS_EVENT ,
	LOG_EVENT_EVENT ,
	SALE_ITEM_EVENT ,
} TClientEvent  ;


typedef enum 
{
 DB_NOT_CONNECTED_HO_RESULT = -1,
 OK_HO_RESULT = 0
} TEZHOResult ;

#ifdef _LINUX_ 
#define NO_ZB_ADDRESS 0xFFFFFFFFFFFFFFFFLLU
#else
#define NO_ZB_ADDRESS 0xFFFFFFFFFFFFFFFF
#endif


#ifdef _WINCE_

#ifdef EZ_DEBUG

#define LOGDIR				"\\"
#define INIDIR				"\\NDFlash\\EZDebug\\"
#define APPDIR				"\\"
#define NVDIR               "\\NDFlash\\EZForecourt\\"
#define ALMDIR              "\\NDFlash\\LOG\\" 

#else

#define LOGDIR				"\\"
#define INIDIR				"\\NDFlash\\EZForecourt\\"
#define APPDIR				"\\NDFlash\\EZForecourt\\"
#define NVDIR				"\\NDFlash\\EZForecourt\\"

#endif

//#elif defined( _LINUX_ )
#elif defined(__linux__)

#define LOGDIR				"Log/"
#define INIDIR				""
#define APPDIR				""
#define NVDIR               ""

#else

#ifdef EZ_DEBUG

#define LOGDIR				"\\EZForecourt\\log\\"
#define INIDIR				"\\EZForecourt\\DebugINI\\"
#define APPDIR				"\\work\\EZServer\\Debug\\"
#define NVDIR               "\\EZForecourt\\"
#define ALMDIR              "\\EZForecourt\\log\\" 

#else

#define LOGDIR				"C:\\EZForecourt\\log\\" 
#define INIDIR				"C:\\EZForecourt\\" 
#define APPDIR				"C:\\EZForecourt\\" 
#define NVDIR               "C:\\EZForecourt\\" 
#define ALMDIR              "C:\\EZForecourt\\log\\" 

#endif

#endif

#ifdef _WINCE_

extern HINSTANCE g_hModule ;

#endif

/*
<DH = data e hora>,<TD = tipo de device>, <ND = numero do device>,<TE = tipo de evento>, <DU = dura��o>,<DES = descri��o de evento> 

TD  pode ser a seguinte :-
�	SVRC  - ezserver service ,               ND = 1 sempre 
�	PUMP - Pump ou PA nosso caso,  ND = numero do PA 
�	EZID - EZID/EZRemote,                  ND = numero de serie do EZID 
�	TANK - sonda de medidor de tanque, ND = numero do tanque  
�	HOSE - Bico                        ND = Numero �nico do bico 
�	GRADE - comustivel   ND  numero do compustivel 
�	Etc 

TE pode ser a seguinte :-
�	INITIALIZE -  device foi incializada  ( servi�o inicializada ou objeto criada ) 
�	TERMINATE � device for terminada ( servi�o parado, ou objeto deletada ) 
�	START  -  device comen�ou a responder 
�	STOP  -  device parou de responder por mais do que 30 minutos 
�	STOP/START   -  device parou e voltou de responder por DU segundos, m�nimo de 30 segundos ( configur�vel ) 
�	EDIT  -  configurac�o do device foi alterado 
�	PRICE -  mudan�a de pre�o foi feito pelo sistema 
�	OFFPRICE -  mudan�a de pre�o foi feito local na bomba 
�	OFFLINE � abastecimento off-line 
�	etc 
*/ 

typedef enum 
{
	SERVER_ALR , 
	PUMP_ALR , 
	TANK_ALR , 
	HOSE_ALR , 
	GRADE_ALR ,
	EZID_ALR ,
	ATTENDANT_ALR , 
	CARD_ALR , 
	PORT_ALR , 
	PROCESS_ALR ,
	POS_ALR ,
	ATG_ALR , 
	SENSOR_ALR , 
	PRICE_SIGN_ALR , 
	USERDEFINED_ALR ,
	PRODUCT_ALR ,
} TLogEventDeviceType ;

typedef enum
{
	INFORMATION_EVENT ,
	WARNING_EVENT ,
	ALARM_EVENT ,
} TLogEventLevel ;


typedef enum 
{
	INITIALIZE_TALR = 0 , 
	TERMINATE_TALR , 
	START_TALR , 
	STOP_TALR , 
	STOP_START_TALR ,
	ADD_TALR , 
	DELETE_TALR , 
	EDIT_TALR ,
	PRICE_TALR , 
	OFFPRICE_TALR , 
	OFFLINE_TALR ,
	ETOT_REVERSE_TALR , 
	ETOT_ZEROED_TALR ,
	MEMORY_TALR , 
	RESET_TALR ,
	TANK_LOW_PRODUCT_WARNING_START_TALR = 100 ,
	TANK_LOW_PRODUCT_WARNING_END_TALR ,
	TANK_LOW_PRODUCT_ALARM_START_TALR ,
	TANK_LOW_PRODUCT_ALARM_END_TALR ,
	TANK_HI_PRODUCT_WARNING_START_TALR ,
	TANK_HI_PRODUCT_WARNING_END_TALR ,
	TANK_HI_PRODUCT_ALARM_START_TALR ,
	TANK_HI_PRODUCT_ALARM_END_TALR ,
	TANK_HI_WATER_WARNING_START_TALR ,
	TANK_HI_WATER_WARNING_END_TALR ,
	TANK_HI_WATER_ALARM_START_TALR ,
	TANK_HI_WATER_ALARM_END_TALR ,
	TANK_PROBE_STOPPED_RESPONDING_TALR ,
	TANK_PROBE_STARTED_RESPONDING_TALR ,
	TANK_ATG_STOPPED_RESPONDING_TALR ,
	TANK_ATG_STARTED_RESPONDING_TALR ,
	TANK_DROP_START_TALR ,
	TANK_DROP_END_TALR ,
	TANK_DROP_DOCUMENT_TALR ,
	TANK_LEAK_START_TALR ,
	TANK_LEAK_END_TALR ,
	TANK_STATE_TALR ,
	TANK_CONFIG_TALR , 
	TANK_CALIBRATION_ERROR_TALR ,
	ATTENDANT_LOGGED_ON_TALR = 200 ,
	ATTENDANT_LOGGED_OFF_TALR,
	ATTENDANT_CARD_BLOCKED_TALR,
	ATTENDANT_WRONG_SHIFT_TALR,
	CLIENT_CARD_BLOCKED_TALR,
	UNKNOWN_CARD_TALR,
	SENSOR_ON_TALR = 300,
	SENSOR_OFF_TALR, 
} TLogEventType ;


#define TANK_HI_PRODUCT_ALARM_BIT		0x00000001
#define TANK_HI_PRODUCT_WARNING_BIT		0x00000002 
#define TANK_LOW_PRODUCT_ALARM_BIT		0x00000004
#define TANK_LOW_PRODUCT_WARNING_BIT	0x00000008 
#define TANK_HI_WATER_ALARM_BIT			0x00000010
#define TANK_HI_WATER_WARNING_BIT		0x00000020
#define TANK_RESPONDING_BIT				0x00000040 
#define TANK_DROP_BIT					0x00000080
#define TANK_LEAK_BIT					0x00000100 
#define TANK_CONFIG_BIT					0x00000200 
#define ATG_RESPONDING_BIT				0x00000400
#define TANK_CALIBRATION_ERROR_BIT		0x00000800


typedef enum TTankType 
{
	INVALID_TANK_TYPE = 0 ,
	MANUAL_DIP_TANK_TYPE ,
	GAUGED_TANK_TYPE ,
	CALCULATE_HORIZONTAL_TANK_TYPE , 
	CALIBRATE_HORIZONTAL_TANK_TYPE ,
	RECONCILE_TANK_TYPE ,
	CALIBRATE_VERTICAL_TANK_TYPE ,  // new  
	CALCULATE_VERTICAL_TANK_TYPE , 
	LAST_TANK_TYPE 
} TTankType ;

typedef enum TTankState 
{
	NOT_RESPONDING_TANKSTATE ,
	IDLE_TANKSTATE ,
	DELIVERING_TANKSTATE ,
	RECEIVING_TANKSTATE ,
	UNKNOWN_TANKSTATE ,
} TTankState ;

typedef enum TAttendantType 
{
	BLOCKED_ATTSTATE = 0 ,
	ENABLED_ATTSTATE ,
	LOG_ON_OFF_ATTSTATE ,
	SITE_USER_ATTSTATE ,
	SITE_MANAGER_ATTSTATE ,
	SITE_ADMIN_ATTSTATE ,
	TEST_DELIVERY_ATTSTATE,
	PRICE_LEVEL_1_ATTSTATE , // new 
	PRICE_LEVEL_2_ATTSTATE , // new 
	UNKOWN_ATTSTATE
} TAttendantType ; 

// Definition of AuthType for Extended delivery properties. 

typedef enum TAuthorisationType 
{
	LOCAL_AUTH_TYPE = 0 ,
	PAYMENT_AUTH_TYPE , 
	CARREFOUR_AUTH_TYPE ,
	UNKNOWN_AUTH_TYPE 
} TAuthorisationType ;

#define MAX_PRICE_ELEMENTS 10 

typedef enum TPriceSignElementType 
{
	UNKNOWN_PS_EL_TYPE = 0 , 
	FIXED_PRICE_PS_EL_TYPE , 
	GRADE_LEVEL1_PS_EL_TYPE ,
	GRADE_LEVEL2_PS_EL_TYPE ,
	HOSE_LEVEL1_PS_EL_TYPE ,
	HOSE_LEVEL2_PS_EL_TYPE ,
	LAST_PS_EL_TYPE 
} TPriceSignElementType ;


// CARREFOUR_AUTH_TYPE ExtTransactionID = Numero de Cupom 
// CARREFOUR_AUTH_TYPE AuthID = Numero do PDV 